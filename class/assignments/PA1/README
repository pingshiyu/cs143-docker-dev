
README file for Programming Assignment 1
========================================

Your directory should now contain the following files:

 Makefile
 README
 atoi.cl -> [cool root]/assignments/PA1/atoi.cl
 stack.cl
 stack.test -> [cool root]/assignments/PA1/stack.test

	The Makefile contains targets for compiling and running your
	program, as well as handing it in.

	The README contains this info. Part of the assignment is to
	answer the questions at the end of this README file.
	Just edit this file.

	atoi.cl is an implementation in Cool of the string to integer
	conversion function known from the C language.

	stack.cl is the skeleton file which you should fill in with
	your program.

	stack.test is a short test input to the stack machine.


        The symlinked files (see "man ln") are that way to emphasize
        that they are read-only.


Instructions
------------

	To compile and run your program, type:

	% gmake test

        Try it now -- it should work, and print "Nothing implemented"
        (among a few other things).


        To simply compile your program, type

        % gmake compile


	Instructions for turning in the assignment will be posted on the
	course web page.

	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Questions on PA1
----------------

1. Describe your implementation of the stack machine in a single short
   paragraph.
	- The implementation is very messy and does not make proper use of classes. Do not copy!!
		- Mostly just trying to work around the (perceived) limitations of Cool, e.g. in the beginning I though `case` statements did not exist, and so it was not possibile to infer subclass types at runtime.
	- The inputs are saved in these `StackItem` objects, which will convert integer strings into `Int` types, and keep the other commands as is. 
		- These `StackItem` objects should really be split into two classes to make their purposes clearer: `StackItem` and `InputCommand`. `StackItem` for the objects that actually go on the stack (`s`, `+` and `Int`s), `InputCommand` for the commands (`x`, `d`, and `e`).
	- The stack is implemented as a `List`
	- We consume the inputs when we get a command, (`e`, `d`, `x`), and we call their respective functions when we receive them.

2. List 3 things that you like about the Cool programming language.
	- It has classes & inheritance structure
	- It has a `case` construct which makes it possible to determine types of subclasses at runtime
	- It implements sequencing in an functional way

3. List 3 things you DON'T like about Cool.
	- If and loop statements requires closing `fi` and `pool`s which are easy to forget. `if` statements forces the `else` branch to be written as well.
	- Sequencing constructs are difficult to get right, particularly with brackets and semicolons.
	- Lack of detailed syntax and static analysis error messages 
